brute force
o(n*n)
int majorityElement(vector<int>& nums) {
        int n=nums.size();
        int a=n/2;
        int ans;
        for(int i=0;i<nums.size();i++)
        {
            int count=0;
            for(int j=0;j<nums.size();j++)
            {
                if(nums[i]==nums[j])
                {
                    count++;
                }
            
            if(count>a)
            {
                ans=nums[j];
                break;
            }
            }
        }
        return ans;
    }

    better
    o(n)
    o(n)
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        map<int,int>mp;
        int ans;
        for(int i=0;i<n;i++)
        {
           mp[nums[i]]++;
        }
        int a=n/2;
        for(auto it:mp)
        {
            if(it.second>a)
            {
             ans=it.first;
            }
        }
        return ans;
    }

//optimal
Moore's Voting Algorithm 
o(n)
o(1)
int majorityElement(vector<int>& nums) {
        int n=nums.size();
        int count=0;
        int temp;
        int ans;
        for(int i=0;i<n;i++)
        {
            if(count==0)
            {
                count=1;
                temp=nums[i];
            }
            else if(temp==nums[i])
            {
                count++;
            }
            else if( temp!=nums[i])
            {
                count--;
            }
        }
        count=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==temp)
            {
                count++;
            }
            if(count>n/2)
            {
                ans=temp;
            }
        }
      return ans;
    }
    
