//brute force
tc=nlogn
sc=o(1)
int findDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int ans;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==nums[i+1])
            {
                ans= nums[i];
                break;
            }
        }
        return ans;
    }
    //better approach
    tc=o(n)
    sc=o(n)
     int findDuplicate(vector<int>& nums) {
        unordered_map<int,int>mp;
        int ans;
        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]]++;
        }
        for(auto it:mp)
        {
            if(it.second>1)
            {
                ans=it.first;
            }
        }
        return ans;
    }
    //optimal
    tc=o(n)
    sc=o(1)
    int findDuplicate(vector<int>& nums) {
       int slow=nums[0];
       int fast=nums[0];
       do{
           slow=nums[slow];
           fast=nums[nums[fast]];
       }
       while(slow!=fast);

        fast=nums[0];
       while(slow!=fast)
       {
           slow=nums[slow];
           fast=nums[fast];

       }
       return slow;
    }
};

