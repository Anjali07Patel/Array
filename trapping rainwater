brute force
TC=O(N)
int trap(vector<int>& height) {
        
        int n = height.size(); 
        int left=0; int right=n-1;
        int res=0;
        int maxleft=0, maxright=0;
        
        while(left<=right){
            
            if(height[left]<=height[right])
            {
                if(height[left]>=maxleft) 
                {
                    maxleft=height[left];
                }
                else 
                {
                res+=maxleft-height[left];
                }
                left++;
            }
            else
            {
                if(height[right]>=maxright) 
                {
                   maxright= height[right];
                }
                else 
                {
                    res+=maxright-height[right];
                }
                right--;
            }
        }
        return res;
    }

//optimal
TC=O(N)
SC=O(N)

 int trap(vector<int>& heights) {
        int ans=0;
        int n=heights.size();
        int left[n];
        int right[n];

        left[0]=heights[0];
        for(int i=1;i<n;i++)
        {
            left[i]=max(left[i-1],heights[i]);
        }
        right[n-1]=heights[n-1];
        for(int i=n-2;i>=0;i--)
        {
            right[i]=max(right[i+1],heights[i]);
        }
        for(int i=0;i<n;i++)
        {
            ans=ans+min(left[i],right[i])-heights[i];
        }
        return ans;
    }
