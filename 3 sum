/* Brute force
TC=O(N*N*N)
SC=2*(no.of triplet)
*/
#include<bits/stdc++.h>
using namespace std;
vector<vector<int>>solve(vector<int>&arr,int n)
{
    set<vector<int>>st;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            for(int k=j+1;k<n;k++)
            {
                if(arr[i]+arr[j]+arr[k]==0)
                {
                    vector<int>temp={arr[i],arr[j],arr[k]};
                    sort(temp.begin(),temp.end());
                    st.insert(temp);
                }
            }
        }
    }
   vector<vector<int>>ans(st.begin(),st.end());
    return ans;
}
int main()
{
   
    vector<int> arr={-1, 0, 1, 2, -1, -4};
    int n=arr.size();
    vector<vector<int>>ans=solve(arr,n);
    for(auto it: ans)
    {
        cout<<"[";
        for(auto i:it)
        {
            cout<<i<<" ";
        }
        cout<<"]";
    }
    cout<<endl;
    return 0;   
}

/*better
TC=O(N*N)
SC=O(N)*(no of triplet)*/
#include<bits/stdc++.h>
using namespace std;
vector<vector<int>>solve(vector<int>&arr,int n)
{
    set<vector<int>>hashSet;
    for(int i=0;i<n;i++)
    {
        set<int>st;
       for(int j=i+1;j<n;j++)
        {
            int third=-(arr[i]+arr[j]);
            if(st.find(third)!=st.end())
            {
                vector<int>temp={arr[i],arr[j],third};
                sort(temp.begin(),temp.end());
                hashSet.insert(temp);
            }
            st.insert(arr[j]);
        }
    }
   vector<vector<int>>ans(hashSet.begin(),hashSet.end());
    return ans;
}
int main()
{
   
    vector<int> arr={-1, 0, 1, 2, -1, -4};
    int n=arr.size();
    vector<vector<int>>ans=solve(arr,n);
    for(auto it: ans)
    {
        cout<<"[";
        for(auto i:it)
        {
            cout<<i<<" ";
        }
        cout<<"]";
    }
    cout<<endl;
    return 0;
    
}

/* optimal
TC=O(N);
SC=no. of triplet
*/
#include<bits/stdc++.h>
using namespace std;
vector<vector<int>>solve(vector<int>&arr,int n)
{
   sort(arr.begin(),arr.end());
   vector<vector<int>>ans;
    for(int i=0;i<n;i++)
    {
        int j=i+1;
        int k=n-1;
        int sum=arr[i]+arr[j]+arr[k];
        if(i>0 && arr[i]==arr[i-1])
        {
            continue;
        }
        while(j<k)
        {
        if(sum<0)
        {
            j++;
        }
        else if(sum>0)
        {
            k--;
        }
        else
        {
            vector<int>temp={arr[i],arr[j],arr[k]};
            ans.push_back(temp);
            j++;
            k--;
            while(j<k && arr[j]==arr[j-1])
            {
                j++;
            }
            while(j<k && arr[k]==arr[k+1])
            {
                k--;
            }
         }
      }    
    }
    return ans;
}
int main()
{
   
    vector<int> arr={-1, 0, 1, 2, -1, -4};
    int n=arr.size();
    vector<vector<int>>ans=solve(arr,n);
    for(auto it: ans)
    {
        cout<<"[";
        for(auto i:it)
        {
            cout<<i<<" ";
        }
        cout<<"]";
    }
    cout<<endl;
    return 0;
    
}
o/p
[-1 -1 2 ][-1 0 1 ]

