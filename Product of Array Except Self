//brute force
o(n*n)
#include<iostream>
using namespace std;
int main()
{
    int arr[]={1,2,3,4};
  
    for(int i=0;i<4;i++)
    {
        int prod=1;
        for(int j=0;j<4;j++)
        {
            if(i!=j)
            {
                prod=prod*arr[j];
            }
        }
        cout<<prod<<" ";
    }
    return 0;
}
//optimal
o(n)
O(1)
vector<int> productExceptSelf(vector<int>& nums) {
        vector<int>ans;
        int n=nums.size();
        int left[n];
        int right[n];

        left[0]=1;
        right[n-1]=1;

        for(int i=1;i<n;i++)
        {
            left[i]=left[i-1]*nums[i-1];
        }
        for(int i=n-2;i>=0;i--)
        {
            right[i]=right[i+1]*nums[i+1];
        }
        for(int i=0;i<n;i++)
        {
            ans.push_back(left[i]*right[i]);
        }
        return ans;
    }
